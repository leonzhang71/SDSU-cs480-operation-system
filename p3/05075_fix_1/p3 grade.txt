This is a **preliminary** test of your upcoming Program 3.

This message, which will appear to be mailed from your account, is intended to
show you some (but not necessarily all) of the checks that will be made on your
assignment when the due date actually arrives.  This is NOT the actual version
that will be graded, but only an attempt to give you early warning of any
potential problems.  Point totals in the final graded version may differ.

[Standard Disclaimer:]
These practice tests are intended to show bugs, but also to reveal places
where you may not be following all the automatic grader's nitpicking
requirements.  If you receive failure warnings on the preliminary tests
and then also have difficulty during the graded event, you have very little
recourse.  To take full advantage of the feedback provided in this course,
you must do the assignments in a timely fashion.
jc

Login     Name             Tty      Idle  Login Time   Office     Office Phone   Host
cssc0094  Chonglin Zhang   pts/65      *  Nov  4 23:13 home                      (10.130.143.187)

Checking Program 3:
Remember, the GradeEarly file will be used to decide if you are FINISHED.
If the GradeEarly file is present at the extra-credit deadline,
your program will be considered 'submitted', with NO further chance for
modifications.  Checking if the GradeEarly file exists:
ls -l ~cssc0094/Three/GradeEarly
-rw------- 1 cssc0094 carroll 0 Nov  3 16:12 /home/cs/carroll/cssc0094/Three/GradeEarly
If this were the extra credit deadline (Friday night, 11/1/19),
the autograder WOULD collect your program.
Your gradernotes file contains:

No gradernotes file exists.
                                              ERROR    ERROR    ERROR    ERROR


NOTE: Make sure your gradernotes documentation EXPLAINS your solution strategy.
If you use a common file to pass values between processes, you should explain
why your code makes it impossible for a robot to use printeger() until after
the common file has been initialized, etc.

A significant part of your grade depends on how quickly your writeup
leads me to an understanding of how your code works.
Be sure to discuss your file/semaphore cleanup strategy, too.

Make sure gradernotes also contains the other two REQUIRED statements, as well.

total 24
drwx------ 5 cssc0094   52 Aug 24 15:04 Maildir/
drwx------ 2 cssc0094  154 Sep 27 22:40 One/
-rw------- 1 cssc0094 1733 Aug 22 23:45 README
drwx------ 2 cssc0094 4096 Nov  5 09:38 Three/
drwx------ 2 cssc0094 4096 Oct  7 00:22 Two/
drwx------ 2 cssc0094 4096 Sep 25 20:27 Zero/
lrwxrwxrwx 1 cssc0094   31 Aug 27 23:55 calendar -> /home/cs/faculty/cs480/calendar
drwx------ 2 cssc0094   61 Aug 26 10:35 data/
drwx------ 2 cssc0094  129 Sep  6 00:15 data1/
drwx------ 2 cssc0094   64 Sep  6 00:34 testOne/
drwx------ 2 cssc0094 4096 Oct  5 12:42 testTwo/
-rw------- 1 cssc0094   29 Sep 29 16:52 your.outputc
Test 0... checking for the proper directory:
total 128
lrwxrwxrwx 1 cssc0094    34 Nov  3 14:46 CHK.h -> /home/cs/faculty/cs480/Three/CHK.h
-rw------- 1 cssc0094     0 Nov  3 16:12 GradeEarly
lrwxrwxrwx 1 cssc0094    37 Nov  3 14:46 makefile -> /home/cs/faculty/cs480/Three/makefile
-rwx------ 1 cssc0094 19864 Nov  5 09:38 p3*
lrwxrwxrwx 1 cssc0094    33 Nov  3 14:46 p3.h -> /home/cs/faculty/cs480/Three/p3.h
-rw------- 1 cssc0094  5558 Nov  4 23:13 p3helper.c
-rw------- 1 cssc0094 25464 Nov  5 09:38 p3helper.o
lrwxrwxrwx 1 cssc0094    37 Nov  3 14:46 p3main.c -> /home/cs/faculty/cs480/Three/p3main.c
-rw------- 1 cssc0094 17168 Nov  5 09:38 p3main.o
-rwx------ 1 cssc0094 26968 Nov  5 09:38 p3robot*
lrwxrwxrwx 1 cssc0094    38 Nov  3 14:46 p3robot.c -> /home/cs/faculty/cs480/Three/p3robot.c
-rw------- 1 cssc0094 13688 Nov  5 09:38 p3robot.o
-rw-r--r-- 1 cssc0094  5715 Oct 18  2019 semex.c
Test 1... testing will proceed only if you have MODIFIED the proper file:
ls -lo ~/Three/; diff ~cssc0094/Three/p3helper.c ~cs480/Three/p3helper.c
total 128
lrwxrwxrwx 1 cssc0094    34 Nov  3 14:46 CHK.h -> /home/cs/faculty/cs480/Three/CHK.h
-rw------- 1 cssc0094     0 Nov  3 16:12 GradeEarly
lrwxrwxrwx 1 cssc0094    37 Nov  3 14:46 makefile -> /home/cs/faculty/cs480/Three/makefile
-rwx------ 1 cssc0094 19864 Nov  5 09:38 p3
lrwxrwxrwx 1 cssc0094    33 Nov  3 14:46 p3.h -> /home/cs/faculty/cs480/Three/p3.h
-rw------- 1 cssc0094  5558 Nov  4 23:13 p3helper.c
-rw------- 1 cssc0094 25464 Nov  5 09:38 p3helper.o
lrwxrwxrwx 1 cssc0094    37 Nov  3 14:46 p3main.c -> /home/cs/faculty/cs480/Three/p3main.c
-rw------- 1 cssc0094 17168 Nov  5 09:38 p3main.o
-rwx------ 1 cssc0094 26968 Nov  5 09:38 p3robot
lrwxrwxrwx 1 cssc0094    38 Nov  3 14:46 p3robot.c -> /home/cs/faculty/cs480/Three/p3robot.c
-rw------- 1 cssc0094 13688 Nov  5 09:38 p3robot.o
-rw-r--r-- 1 cssc0094  5715 Oct 18  2019 semex.c
1:/* p3helper.c
2:   Program 3 CS480 SDSU Fall 2021
3:
4:   This is the ONLY file you are allowed to change. (In fact, the other
5:   files should be symbolic links to
6:     ~cs480/Three/p3main.c
7:     ~cs480/Three/p3robot.c
8:     ~cs480/Three/p3.h
9:     ~cs480/Three/makefile
10:     ~cs480/Three/CHK.h    )
11:   */
12:#include "p3.h"
13:
14:/* You may put declarations/definitions here.
15:   In particular, you will probably want access to information
16:   about the job (for details see the assignment and the documentation
17:   in p3robot.c):
18:     */
19:extern int nrRobots;
20:extern int quota;
21:extern int seed;
22:
23:// debug macros
24:#define DEBUG 0
25:#if(DEBUG)
26:    #define D(x) x
27:#else
28:    #define D(x)
29:#endif
30:
31:sem_t *pmutx;
32:int self_placed;
33:int* pnewline;
34:char semaphoreMutx[SEMNAMESIZE];
35:int fd_count = -1;
36:
37:// calculate the newline position
38:// aka. the shape of triangle
39:// return value is that the number of
40:// items that should newline happens
41:// example of 12 items
42:// **
43:// ****
44:// ***
45:// **
46:// *
47:// the first line, 2 items to newline
48:// the second line, 6 items to newline (item number is accumulated)
49:// the third line, 9 items, ...
50:// so the return value is an array of {2,6,9,11,12,0}
51:static int* do_math(int total);
52:// calculate current line number
53:// by how many item has been placed.
54:static int calc_lineno(int placed);
55:
56:/* General documentation for the following functions is in p3.h
57:   Here you supply the code, and internal documentation:
58:   */
59:void initStudentStuff(void) {
60:    int count;
61:    // calculate common knowledge
62:    pnewline = do_math(nrRobots * quota);
63:    // make semaphore name
64:    sprintf(semaphoreMutx,"/%s%ldmutx1",COURSEID,(long)getuid());
65:    // try to create semaphore
66:    pmutx = sem_open(semaphoreMutx, O_RDWR | O_CREAT | O_EXCL, S_IRUSR | S_IWUSR, 0);
67:    D(printf("Total is %d, my quota is %d\n", nrRobots * quota, quota);)
68:    D(printf("Trying to open mutex\n");)
69:    if (pmutx) {
70:        count = 0;
71:        // the first process to run is also responsible to
72:        // create the count file and initialize it
73:        CHK((fd_count = open("countfile" ,O_RDWR|O_CREAT|O_TRUNC,S_IRUSR|S_IWUSR)));
74:        CHK(lseek(fd_count, 0, SEEK_SET));
75:        assert(sizeof(count) == write(fd_count, &count, sizeof(count)));
76:        // after the countfile has been created and initialized,
77:        // then the other process is allowed to run
78:        sem_post(pmutx);
79:        D(printf("I am master\n");)
80:    } else if (errno == EEXIST) {
81:        // other process to run open the semaphore..
82:        D(printf("I am slave\n");)
83:        pCHK(SEM_FAILED == (pmutx = sem_open(semaphoreMutx, O_RDWR | O_EXCL, S_IRUSR | S_IWUSR)));
84:    } else {
85:        assert(0);
86:    }
87:}
88:
89:/* In this braindamaged version of placeWidget, the widget builders don't
90:   coordinate at all, and merely print a random pattern. You should replace
91:   this code with something that fully follows the p3 specification. */
92:void placeWidget(int n) {
93:    // line number, items placed
94:    int lineno, placed;
95:
96:    // should process do cleanup job
97:    int clean_self, clean_all;
98:
99:    clean_self = 0;
100:    clean_all = 0;
101:
102:    // enter critical region
103:    sem_wait(pmutx);
104:    // read how many placed
105:
106:    if (fd_count < 0) {
107:        CHK((fd_count = open("countfile", O_RDWR, S_IRUSR|S_IWUSR)));
108:    }
109:    CHK(lseek(fd_count, 0, SEEK_SET));
110:    CHK(read(fd_count,&placed, sizeof(placed)));
111:    // calculate line number
112:    lineno = calc_lineno(placed);
113:    // place
114:    printeger(n);
115:    D(printf("Placing %dth item\n", placed);)
116:
117:    placed += 1;
118:    self_placed += 1;
119:
120:    if (self_placed == quota) {
121:        clean_self = 1;
122:    }
123:    if (placed == nrRobots * quota) {
124:        // finish
125:        D(printf("Should finish now\n");)
126:        printf("F\n");
127:        clean_all = 1;
128:    } else if (placed == pnewline[lineno]) {
129:        // newline
130:        printf("N\n");
131:    }
132:    fflush(stdout);
133:
134:    if (!clean_all) {
135:        // continue, update countfile
136:        CHK(lseek(fd_count, 0, SEEK_SET));
137:        assert(sizeof(placed) == write(fd_count,&placed, sizeof(placed)));
138:    }
139:    sem_post(pmutx);
140:    if (clean_self) {
141:        // clean up self
142:        CHK(sem_close(pmutx));
143:        CHK(close(fd_count));
144:        free(pnewline);
145:    }
146:    if (clean_all) {
147:        // clean all
148:        CHK(sem_unlink(semaphoreMutx));
149:        CHK(unlink("countfile"));
150:    }
151:}
152:
153:/* If you feel the need to create any additional functions, please
154:   write them below here, with appropriate documentation:
155:   */
156:static int* do_math(int total) {
157:    int* ret;
158:    int i, left, nitem, lineno, nline;
159:    left = total;
160:    // firstly, calculate how many lines in total
161:    for (nitem = 1, lineno = 0; nitem <= left; ++nitem, ++lineno) {
162:        left -= nitem;
163:    }
164:    if (left) {
165:        lineno += 1;
166:    }
167:
168:    // got the number of total lines
169:    nline = lineno;
170:    // allocate
171:    ret = malloc((lineno + 1) * sizeof(int));
172:
173:    // next, fill the result
174:    left = total;
175:    nitem = 1;
176:    // it is easier to firstly
177:    // calculate number of items in each line
178:    // the last line has 1 item, so it is
179:    // easier to calculate in reverse order
180:    for (lineno = nline - 1; lineno >= 0; --lineno) {
181:        ret[lineno] = nitem;
182:        left -= nitem;
183:        nitem += 1;
184:        if (nitem > left) {
185:            nitem = left;
186:        }
187:    }
188:
189:    for (i = 1; i < nline; ++i) {
190:        ret[i] += ret[i - 1];
191:    }
192:    ret[i] = 0;
193:    return ret;
194:}
195:
196:static int calc_lineno(int placed) {
197:    int i;
198:    for (i = 0; pnewline[i] != 0; ++i) {
199:        if (placed < pnewline[i]) {
200:            return i;
201:        }
202:    }
203:    return -1;
204:}

----------------------------------------------------------------------sem_
Looking for possible semaphore operations:
grep -n sem_ p3helper.c
31:sem_t *pmutx;
66:    pmutx = sem_open(semaphoreMutx, O_RDWR | O_CREAT | O_EXCL, S_IRUSR | S_IWUSR, 0);
78:        sem_post(pmutx);
83:        pCHK(SEM_FAILED == (pmutx = sem_open(semaphoreMutx, O_RDWR | O_EXCL, S_IRUSR | S_IWUSR)));
103:    sem_wait(pmutx);
139:    sem_post(pmutx);
142:        CHK(sem_close(pmutx));
148:        CHK(sem_unlink(semaphoreMutx));

----------------------------------------------------------------------open
Looking for possible file openings:
grep -n "[^_]open" p3helper.c
68:    D(printf("Trying to open mutex\n");)
73:        CHK((fd_count = open("countfile" ,O_RDWR|O_CREAT|O_TRUNC,S_IRUSR|S_IWUSR)));
81:        // other process to run open the semaphore..
107:        CHK((fd_count = open("countfile", O_RDWR, S_IRUSR|S_IWUSR)));

----------------------------------------------------------------------unlink
Looking for possible file closings:
grep -n "[^_]unlink" p3helper.c
149:        CHK(unlink("countfile"));

----------------------------------------------------------------------sprintf

---------------------------------------------------------------------- -1
Looking for problematic 'magic constants:
grep -n .-1 p3helper.c
35:int fd_count = -1;
203:    return -1;

----------------------------------------------------------------------SEM_
Looking for appropriate mnemonics:
grep -n SEM_FAILED p3helper.c
83:        pCHK(SEM_FAILED == (pmutx = sem_open(semaphoreMutx, O_RDWR | O_EXCL, S_IRUSR | S_IWUSR)));

----------------------------------------------------------------------sprintf
Looking for unique semaphore names:
grep -n sprintf p3helper.c
64:    sprintf(semaphoreMutx,"/%s%ldmutx1",COURSEID,(long)getuid());

----------------------------------------------------------------------exit
Looking for problematic exit()s:
egrep -n 'exit|perror|CHK' p3helper.c
10:     ~cs480/Three/CHK.h    )
73:        CHK((fd_count = open("countfile" ,O_RDWR|O_CREAT|O_TRUNC,S_IRUSR|S_IWUSR)));
74:        CHK(lseek(fd_count, 0, SEEK_SET));
83:        pCHK(SEM_FAILED == (pmutx = sem_open(semaphoreMutx, O_RDWR | O_EXCL, S_IRUSR | S_IWUSR)));
107:        CHK((fd_count = open("countfile", O_RDWR, S_IRUSR|S_IWUSR)));
109:    CHK(lseek(fd_count, 0, SEEK_SET));
110:    CHK(read(fd_count,&placed, sizeof(placed)));
136:        CHK(lseek(fd_count, 0, SEEK_SET));
142:        CHK(sem_close(pmutx));
143:        CHK(close(fd_count));
148:        CHK(sem_unlink(semaphoreMutx));
149:        CHK(unlink("countfile"));

----------------------------------------------------------------------sleep
Looking for problematic sleep()s (There should be NONE in your p3helper.c):
grep -n sleep p3helper.c

Test 2... testing will proceed only if you have the proper SOFT links:
FIVE project files should be soft links; yours are:
lrwxrwxrwx 1 cssc0094 37 Nov  3 14:46 makefile -> /home/cs/faculty/cs480/Three/makefile
lrwxrwxrwx 1 cssc0094 34 Nov  3 14:46 CHK.h -> /home/cs/faculty/cs480/Three/CHK.h
lrwxrwxrwx 1 cssc0094 33 Nov  3 14:46 p3.h -> /home/cs/faculty/cs480/Three/p3.h
lrwxrwxrwx 1 cssc0094 37 Nov  3 14:46 p3main.c -> /home/cs/faculty/cs480/Three/p3main.c
lrwxrwxrwx 1 cssc0094 38 Nov  3 14:46 p3robot.c -> /home/cs/faculty/cs480/Three/p3robot.c

Test 3... does your program compile?
make clean; make
rm -f p3 p3robot p3main.o p3helper.o p3robot.o
gcc -g -O -Wall -Wpointer-arith -Wcast-qual -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes -Wnested-externs -c p3main.c
gcc -g -O -Wall -Wpointer-arith -Wcast-qual -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes -Wnested-externs -o p3 p3main.o -pthread -lm
gcc -g -O -Wall -Wpointer-arith -Wcast-qual -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes -Wnested-externs -c p3robot.c
gcc -g -O -Wall -Wpointer-arith -Wcast-qual -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes -Wnested-externs -c p3helper.c
gcc -g -O -Wall -Wpointer-arith -Wcast-qual -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes -Wnested-externs -o p3robot p3robot.o p3helper.o -pthread -lm
[1] 24401

Test 4... three robots making 2 items each.
Here is the result of ~cssc0094/Three/p3 3 111 2

Your output was:
Here is the output of /bin/ls -o /dev/shm/ | grep $USER
If you see any files listed above that you own, you may need to rm them before
testing p3.  If you just want this report without testing p3, try 'p3 0'
 24408 24408 24409N
 24410 24409N
 24410F
The number of items in each row were: 3 2 1
Good.
The last characters in each row of your output are: N N F
Good.
Does each PID get reported the correct number of times?
Yes.
                         Robots successfully coordinated -- CONGRATULATIONS

Test 5... five robots making 4 items each.
Here is the result of ~cssc0094/Three/p3 5 999 4

Your output was:
Here is the output of /bin/ls -o /dev/shm/ | grep $USER
If you see any files listed above that you own, you may need to rm them before
testing p3.  If you just want this report without testing p3, try 'p3 0'
 24456 24458 24458 24459 24459N
 24459 24459 24456 24456 24458N
 24458 24457 24456 24460N
 24457 24457 24457N
 24460 24460N
 24460F
The number of items in each row were: 5 5 4 3 2 1
Good.
The last characters in each row of your output are: N N N N N F
Good.
Does each PID get reported the correct number of times?
Yes.
                         Robots successfully coordinated -- CONGRATULATIONS

Test 6... the same, but starting from an UNWRITABLE directory:
Here is the result of ~cssc0094/Three/p3 5 999 4

your p3 seems to be deadlocked
NO further tests are possible    ERROR    ERROR    ERROR    ERROR
Killed
Your output was:
Here is the output of /bin/ls -o /dev/shm/ | grep $USER
If you see any files listed above that you own, you may need to rm them before
testing p3.  If you just want this report without testing p3, try 'p3 0'
In file p3helper.c, on line 73:
errno = 13
Exiting because: Permission denied
The number of items in each row were: killing p3, p3robot...
                                              ERROR    ERROR    ERROR    ERROR
The number of items in each row should have been: 5 5 4 3 2 1
The last characters in each row of your output are:                                               ERROR    ERROR    ERROR    ERROR
The last characters should have been: N N N N N N F
Does each PID get reported the correct number of times?
                                              ERROR    ERROR    ERROR    ERROR
Each PID should have been reported four times.
Robots FAILED to coordinate properly.

End of test runs.

                    +---------------------------------------+
                     Your processes seem to be deadlocked...
                    +---------------------------------------+

If you passed the earlier tests, and had trouble only on the last one,
that almost certainly indicates that you have NOT designed your program to
always create your common file in a 'safe' place. (The last test started
from an UNWRITABLE directory.)

After this run, here's what semaphores (if any) were left in /tmp:
/bin/ls -od /tmp/.* /tmp/* | grep cssc0094
-rwx------  1 cssc0094   32 Nov  5 11:10 /dev/shm/sem.4801206done
-rw-------  1 cssc0094   32 Nov  5 11:10 /dev/shm/sem.4801206mutx1

(Check carefully; there should be nothing listed above that your p3 is
responsible for leaving behind.  If you have a deadlock, your code can't
possibly avoid leaving stuff behind.)

Program 3 gradesheet

a PARTIAL checklist of things the grader may judge:
                                                constants, etc. documented?
Quality of documentation & explanations         use mnemonics (e.g., NOT -1)
                                        ___/    name, class, professor, date?
THREE mandatory statements in gradernotes       algorithm explained?
                                        ___/
Program logic and correctness                   Did you follow ALL the specs and
                                        ___/    constraints outlined in p3.h?
"F" in correct place?
                                        ___/    If there are *logical* race
No potential race conditions                    conditions, this is very bad,
                                        ___/    even if your code appears to
No extraneous files left behind                 give right answers.  Check this!
                                        ___/
NO sleep() calls in p3helper.c                  sleep() masks some problems,
                                        ___/    but could cause others...
Only 'approved' sem_* system calls?
                                        ___/    You'll LOSE a fair amount of
Proper mathematical 'shape' calculation?        credit if you hard-code numbers
                                        ___/
Initialization strategy explained?              How do you ensure that no robots
                                        ___/    print before file/semaphores are
Appropriate non-clashing node names             fully initialized?
                                        ___/
Cleanup strategy discussed?                     as well as algorithm explanation
                                        ___/   
Support file[s] created in a 'safe' place?      ...in a way that STILL works if
                                        ___/    some other user runs your code?
Unexpected behavior (if any) documented       
in gradernotes file                     ___/    SAY what isn't working!
                                       ______
                                      |      |
                                      |______|
                                      |  20  |
                                      |______|
