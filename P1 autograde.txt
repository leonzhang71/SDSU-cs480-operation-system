This is a **preliminary** test of your upcoming Program 1.
Due dates for our programs can be found in the ~cs480/calendar file on edoras.

This message, which will appear to be mailed from your account, is intended to
show you some (but not necessarily all) of the checks that will be made on your
assignment when the due date actually arrives.  This is NOT the actual version
that will be graded, but only an attempt to give you early warning of any
potential problems.  Point totals in the final graded version may differ.

[Standard Disclaimer:]
These practice tests are intended to show bugs, but also to reveal places
where you may not be following all the automatic grader's nitpicking
requirements.  If you receive failure warnings on the preliminary tests
and then also have difficulty during the graded event, you have very little
recourse.  To take full advantage of the feedback provided in this course,
you must do the assignments in a timely fashion.
jc

Login     Name             Tty      Idle  Login Time   Office     Office Phone   Host
cssc0094  Chonglin Zhang   pts/16      *  Sep  8 19:50 home                      (10.130.244.91)

Checking Program 1:
total 8
drwx------ 5 cssc0094   52 Aug 24 15:04 Maildir/
drwx------ 2 cssc0094  154 Sep 10 20:09 One/
-rw------- 1 cssc0094 1733 Aug 22 23:45 README
drwx------ 2 cssc0094 4096 Sep  1 11:00 Zero/
lrwxrwxrwx 1 cssc0094   31 Aug 27 23:55 calendar -> /home/cs/faculty/cs480/calendar
drwx------ 2 cssc0094   61 Aug 26 10:35 data/
drwx------ 2 cssc0094  129 Sep  6 00:15 data1/
drwx------ 2 cssc0094   64 Sep  6 00:34 testOne/
Test 0... checking for the proper directory:
total 36
-rw------- 1 cssc0094  5100 Sep  8 19:54 getword.c
lrwxrwxrwx 1 cssc0094    36 Sep  6 00:24 getword.h -> /home/cs/faculty/cs480/One/getword.h
-rw------- 1 cssc0094  8144 Sep 10 20:09 getword.o
-rw------- 1 cssc0094   149 Sep  7 19:12 gradernotes
lrwxrwxrwx 1 cssc0094    35 Sep  6 00:21 makefile -> /home/cs/faculty/cs480/One/makefile
-rwx------ 1 cssc0094 12016 Sep 10 20:09 p1*
lrwxrwxrwx 1 cssc0094    31 Sep  6 00:22 p1.c -> /home/cs/faculty/cs480/One/p1.c
-rw------- 1 cssc0094  3408 Sep 10 20:09 p1.o
Test 1... testing will proceed only if you have created the proper file:
ls -lo ~/One/getword.c
-rw------- 1 cssc0094 5100 Sep  8 19:54 /home/cs/carroll/cssc0094/One/getword.c

1    //
2    ////Name: Chonglin ZHang
3    ////RedID: 822942790
4    ////Class account: cssc0094
5    ////Course: CS480 Operating Systems
6    ////Instructor: John Carroll
7    ////Due date: August 31, 2021
8    ////File name: getword.c
9    ////The lexical analyzer will be implemented by a module called getword().
10   ////That examines successive words on the input stream(stdin) until getword
()
11   ////return -1.
12   ////Returning the size of each word of the user input and add these charact
ers
13   ////into the pointer.
14   ////The p0.c will call this function and print output.
15   ////
16   //
17   
18   
19   
20   
21   
22   #include "getword.h"
23   
24   
25   #define N_META_CHAR 7
26   char* meta_chars[N_META_CHAR] = {
27       "<",
28       ">",
29       "|",
30       ";",
31       "'",
32       "&",
33       ">!"
34   };
35   
36   int is_meta_chars(char* chs, int n)
37   {
38       int i = 0;
39       for (; i < N_META_CHAR; ++i) {
40           if (strncmp(meta_chars[i], chs, n) == 0) {
41               return 1;
42           }
43       }
44   
45       return 0;
46   }
47   
48   int getword(char *w)
49   {
50       int i;
51       char ch;
52       int count = 0;
53       int meta_count = 0;
54       char meta_chars[STORAGE];
55       /* quoting flag */
56       int is_quoting = 0;
57       /* escaping falg */
58       int is_escaping = 0;
59       /* meta combining flag */
60       int is_meta_combining = 0;
61   
62       for (;;) {
63           if ((ch = (char)getchar()) == EOF) {
64               if (count == 0) {
65                   w[0] = 0;
66                   return -1;
67               }
68   
69               break;
70           }
71   
72           if (count >= STORAGE - 1) {
73               /* maximum */
74               ungetc(ch, stdin);
75               break;
76           }
77   
78           /* printf("got %x\n", ch); */
79   
80           if (ch == '\n' || ch == ';') {
81               if (count > 0) {
82                   ungetc(ch, stdin);
83               }
84   
85               break;
86           }
87   
88   
89           if (count == 0 && meta_count == 0) {
90               if (ch == ' ') {
91                   /* skip leading spaces */
92                   if (is_quoting) {
93                       w[count] = ch;
94                       count = count + 1;
95                   }
96                   continue;
97               }
98   
99               if (ch == '\'') {
100                  is_quoting = 1;
101                  continue;
102              }
103 
104              if (ch == '\\' && !is_escaping) {
105                  //TODO: is_escaping = 1;
106                  continue;
107              }
108 
109              // printf("got %c\n", ch);
110              if (is_meta_chars(&ch, 1)) {
111                  // printf("%c is meta char\n", ch);
112                  /* meta char, set flag */
113                  meta_chars[meta_count] = ch;
114                  meta_count = meta_count + 1;
115                  is_meta_combining = 1;
116                  continue;
117              }
118 
119              w[count] = ch;
120              count = count + 1;
121              continue;
122          }
123 
124          if (ch == ' ') {
125              if (is_quoting || is_escaping) {
126                  /* part of word  */
127                  w[count] = ch;
128                  count = count + 1;
129 
130                  if (is_escaping) {
131                      is_escaping = 0;
132                  }
133                  continue;
134              }
135 
136              if (meta_count > 0) {
137                  for (i=0; i<meta_count; ++i) {
138                      w[count] = meta_chars[i];
139                      count = count + 1;
140                  }
141              }
142 
143              /* end of word */
144              break;
145          }
146 
147          if (ch == '\'') {
148              if (is_escaping) {
149                  /* 'hello\'world' -> hello'world */
150                  w[count-1] = ch;
151                  is_escaping = 0;
152                  continue;
153              }
154 
155              if (is_quoting) {
156                  is_quoting = 0;
157                  continue;
158                  // break;
159              }
160 
161              /* set quoting flag */
162              is_quoting = 1;
163              continue;
164          }
165 
166          if (ch == '\\') {
167              if (is_escaping) {
168                  w[count] = ch;
169                  count = count + 1;
170                  is_escaping = 0;
171                  continue;
172              }
173 
174              if (is_quoting) {
175                  w[count] = ch;
176                  count = count + 1;
177                  is_escaping = 1;
178                  continue;
179              }
180 
181              /* set escaping flag */
182              is_escaping = 1;
183              continue;
184          }
185 
186          if (is_meta_combining) {
187              meta_chars[meta_count] = ch;
188              meta_count = meta_count + 1;
189              if (is_meta_chars(meta_chars, meta_count)) {
190                  /* combination */
191                  continue;
192              }
193 
194             
195              int i;
196              ungetc(ch, stdin);
197              meta_count = meta_count - 1;
198              for (i=0; i<meta_count; ++i) {
199                  w[count] = meta_chars[i];
200                  count = count + 1;
201              }
202 
203              break;
204          }
205 
206          if (is_meta_chars(&ch, 1)) {
207              if (is_escaping) {
208                  w[count] = ch;
209                  count = count + 1;
210                  is_escaping = 0;
211                  continue;
212              }
213 
214              /* first meta char */
215              ungetc(ch, stdin);
216              break;
217          }
218 
219          /* part of word */
220          w[count] = ch;
221          count = count + 1;
222          if (is_escaping) {
223              is_escaping = 0;
224          }
225          continue;
226      }
227     
228      w[count] = 0;
229 
230      return count;
231  }

Test 2... is getword.c documented?
(Your getword.c documentation does NOT have to repeat the specs in getword.h,
but it should contain your name, instructor name [NOTE: 'Carroll' contains two
'R's and two 'L's], class (that is, 'CS480'), due date, etc.)
One point was possible here; your total is now 1/1

Test 3... how is the syntax?
splint -warnposix +trytorecover -weak getword.c
Splint 3.1.2 --- 11 Oct 2015

getword.c: (in function is_meta_chars)
getword.c:40:41: Function strncmp expects arg 3 to be size_t gets int: n
  To allow arbitrary integral types to match any integral type, use
  +matchanyintegral.
getword.c: (in function getword)
getword.c:195:16: Parse Error. Attempting to continue.
getword.c:195:16: Cannot recover from parse error.
*** Cannot continue.

NOTE: not everything that 'splint' comments about is necessarily a bad thing;
for example, splint may complain if you don't save the value that ungetc()
returns (even if this may be a perfectly reasonable thing to ignore).

Test 4... Does the gradernotes file exist?
Yes.
Your gradernotes file contains:
1:I wrote this code myself.
2:I also use getchar and ungetc for program 0.
3:I use program 0 getword.c for this program 1 and add more special conditions.

A human will have to read and evaluate the contents of gradernotes.
Double-check that you have BOTH required statements in gradernotes!

Test 5: checking the soft links...
Is the getword.h soft link in place?
ls -l ~cssc0094/One/getword.h
lrwxrwxrwx 1 cssc0094 carroll 36 Sep  6 00:24 /home/cs/carroll/cssc0094/One/getword.h -> /home/cs/faculty/cs480/One/getword.h
Yes.
Is the makefile soft link in place?
ls -l ~cssc0094/One/makefile
lrwxrwxrwx 1 cssc0094 carroll 35 Sep  6 00:21 /home/cs/carroll/cssc0094/One/makefile -> /home/cs/faculty/cs480/One/makefile
Yes.
Is the p1.c soft link in place?
ls -l ~cssc0094/One/p1.c
lrwxrwxrwx 1 cssc0094 carroll 31 Sep  6 00:22 /home/cs/carroll/cssc0094/One/p1.c -> /home/cs/faculty/cs480/One/p1.c
Yes.
Unless ALL these are right, you could LOSE a point here; your total is now 1/1

Test 6... does your program compile?
make clean; make
rm -f *.o p1
gcc -g   -c -o getword.o getword.c
gcc -g   -c -o p1.o p1.c
gcc -o p1 getword.o p1.o
[1] 17943

Test 7... does your program react to EOF and recognize newlines as delimiters?
Here is the result of ~cssc0094/One/p1 < ~cs480/Data1/input6 :

Your output was:
n=6, s=[eschew]
n=0, s=[]
n=0, s=[]
n=11, s=[obfuscation]
n=0, s=[]
n=0, s=[]
n=-1, s=[]

A diff of the correct output with your output shows:
                              No differences encountered -- CONGRATULATIONS

To make any differences easy to see, the actual diff command I used was:
diff -a myoutput youroutput | cat -vt

Two more points were possible here; your total is now 3/3

Test 8... does your program recognize metacharacters?
Here is the result of ~cssc0094/One/p1 < ~cs480/Data1/input2 :

Your output was:
n=4, s=[Null]
n=1, s=[&]
n=4, s=[Void]
n=-1, s=[]

A diff of the correct output with your output shows:
                              No differences encountered -- CONGRATULATIONS
Two more points were possible here; your total is now 5/5

Test 9... how does your program react to backslash-metacharacters?
Here is the result of ~cssc0094/One/p1 < ~cs480/Data1/input3 :

Your output was:
n=13, s=[one\>stillone]
n=0, s=[]
n=5, s=[three]
n=1, s=[<]
n=4, s=[five]
n=1, s=[>]
n=0, s=[]
n=-1, s=[]

A diff of the correct output with your output shows:
                              No differences encountered -- CONGRATULATIONS

Two more points were possible here; your total is now 7/7

Test 10... does your program react correctly to all types of metacharacters?
Here is the result of ~cssc0094/One/p1 < ~cs480/Data1/input4 :

Your output was:
n=1, s=[>]
n=1, s=[<]
n=10, s=[out\file <]
n=2, s=[>!]
n=1, s=[&]
n=0, s=[]
n=-1, s=[]

A diff of the correct output with your output shows:
                              No differences encountered -- CONGRATULATIONS

Two more points were possible here; your total is now 9/9

Test 11... does your program handle buffer overruns correctly?
Here is the result of ~cssc0094/One/p1 < ~cs480/Data1/input5 :

Your output was:
n=5, s=[word1]
n=1, s=[|]
n=254,
s=[123456789a123456789b123456789c123456789d123456789e123456789f123456789g1234567
89h123456789i123456789j123456789k123456789l123456789m123456789n123456789o1234567
89p123456789q123456789r123456789s123456789t123456789u123456789v123456789w1234567
89x123456789y1234]
n=254,
s=[56789z123456789A123456789B123456789C123456789D123456789E123456789F123456789G1
23456789H123456789I123456789J123456789K123456789L123456789M123456789N123456789O1
23456789P123456789Q123456789R123456789S123456789T123456789U123456789V123456789W1
23456789X12345678]
n=12, s=[9Y123456789Z]
n=0, s=[]
n=-1, s=[]

A diff of the correct output with your output shows:
                              No differences encountered -- CONGRATULATIONS

Three more points were possible here; your total is now 12/12

Here is the result of ~cssc0094/One/p1 < ~cs480/Data1/input7 :

Your output was:
n=14, s=[pesky'quoting ]
n=7, s=[missing]
n=6, s=[ quote]
n=0, s=[]
n=-1, s=[]

A diff of the correct output with your output shows:
                              No differences encountered -- CONGRATULATIONS
Note: getword follows standard shell syntax: tcsh turns 'foo'2'bar' into foo2bar
In p2, we'll have to flag mismatched quotes as an error, but in p1, getword()
will just pretend a closing quote was included.
Two more points were possible here; your total is now 14/14

Here is the result of ~cssc0094/One/p1 < ~cs480/Data1/input1 :

Your output was:
n=6, s=[eschew]
n=11, s=[obfuscation]
n=-1, s=[]

A diff of the correct output with your output shows:
                              No differences encountered -- CONGRATULATIONS

Two more points were possible here; your total is now 16/16

Your grade for this assignment may be adjusted by a (human) grader at the
due date.  Your grade could be as much as two points lower, depending on what
you have put in gradernotes, and the quality of your getword.c documentation.

             ------
Total Points | 16 |  for cssc0094 - Chonglin Zhang,home for Program 1
             |----|
             | 16 |
             ------
